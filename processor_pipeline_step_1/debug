diff --git a/processor_pipeline_step_1/assembly.v b/processor_pipeline_step_1/assembly.v
index 4dab6fe..9cbf649 100644
--- a/processor_pipeline_step_1/assembly.v
+++ b/processor_pipeline_step_1/assembly.v
@@ -62,5 +62,11 @@ parameter R7                   =  3'b111;
 parameter SUCCESS_COUNT        =  6'd0;
 parameter TEST_COUNT           = {6'b0, 6'b11_1111}; //    -1   =>   00_0001   =>   11_1110 + 1   =>   11_1111
 
+parameter JMP_LOAD             =  6'b11_1111;        //    -1   =>   00_0001   =>   11_1110 + 1   =>   11_1111
+parameter JMP_STORE_AGAIN      = {6'b0, 6'b11_1000}; //    -8   =>   00_1000   =>   11_0111 + 1   =>   11_1000
+parameter FINISH_LOAD          =  6'b11_1111;        //    -1   =>   00_0001   =>   11_1110 + 1   =>   11_1111
+parameter JMP_LOAD_AGAIN       = {6'b0, 6'b11_0010}; //   -14   =>   00_1110   =>   11_0001 + 1   =>   11_0010
+
+
 parameter LEFT_8               =  6'd8;
 parameter LEFT_32              =  6'd32;
\ No newline at end of file
diff --git a/processor_pipeline_step_1/data_dependency_control.v b/processor_pipeline_step_1/data_dependency_control.v
index 806c0ba..3bcdd27 100644
--- a/processor_pipeline_step_1/data_dependency_control.v
+++ b/processor_pipeline_step_1/data_dependency_control.v
@@ -7,8 +7,10 @@ module data_dependency_control
    input      [2:0] source_2      ,
    input      [2:0] r1_destination,
    input      [2:0] r2_destination,
+   input            read          ,
    input            write_en      ,
    input            r2_write_en   ,
+   output           bubble        ,
    output reg       forward1_r1   ,
    output reg       forward2_r1   ,
    output reg       forward1_r2   ,
@@ -16,6 +18,12 @@ module data_dependency_control
 );
 
 
+//******************************************************************************
+// bubble
+//******************************************************************************
+assign bubble = ((r1_destination == source_1) | (r1_destination == source_2)) & write_en & read;
+
+
 //******************************************************************************
 // forward1_r1
 //******************************************************************************
diff --git a/processor_pipeline_step_1/r1.v b/processor_pipeline_step_1/r1.v
index 880831f..c26c176 100644
--- a/processor_pipeline_step_1/r1.v
+++ b/processor_pipeline_step_1/r1.v
@@ -9,6 +9,7 @@ module r1
 // special
    input                   r2_pc_halt    ,
    input                   r2_pc_flush   ,
+   input                   bubble        ,
    input             [6:0] opcode        ,
    input             [2:0] destination   ,
    input      [D_SIZE-1:0] operand_a     ,
@@ -36,7 +37,7 @@ begin
       r1_operand_a   <= r1_operand_a;
       r1_operand_b   <= r1_operand_b;
    end
-   else if(r2_pc_flush)
+   else if(r2_pc_flush | bubble)
    begin
       r1_opcode      <= 0; // NOP
       r1_destination <= 0;
diff --git a/processor_pipeline_step_1/seq_core.v b/processor_pipeline_step_1/seq_core.v
index 980c5c4..5f9f27d 100644
--- a/processor_pipeline_step_1/seq_core.v
+++ b/processor_pipeline_step_1/seq_core.v
@@ -56,6 +56,7 @@ wire              forward1_r2   ;
 wire              forward2_r2   ;
 wire [D_SIZE-1:0] fw_operand_1  ;
 wire [D_SIZE-1:0] fw_operand_2  ;
+wire              bubble        ;
 
 
 //******************************************************************************
@@ -75,6 +76,7 @@ seq_core_fetch
    .r2_pc_loadr   (r2_pc_loadr   ),
    .r2_pc_target  (r2_pc_target  ),
    .r2_pc_flush   (r2_pc_flush   ),
+   .bubble        (bubble        ),
    .ir            (ir            )
 );
 
@@ -131,8 +133,10 @@ data_dependency_control data_dependency_control
    .source_2      (source_2      ),
    .r1_destination(r1_destination),
    .r2_destination(r2_destination),
+   .read          (read          ), // FIXME (output)
    .write_en      (write_en      ),
    .r2_write_en   (r2_write_en   ),
+   .bubble        (bubble        ),
    .forward1_r1   (forward1_r1   ),
    .forward2_r1   (forward2_r1   ),
    .forward1_r2   (forward1_r2   ),
@@ -162,6 +166,7 @@ r1
    .clk           (clk           ),
    .r2_pc_halt    (r2_pc_halt    ),
    .r2_pc_flush   (r2_pc_flush   ),
+   .bubble        (bubble        ),
    .opcode        (opcode        ),
    .destination   (destination   ),
    .operand_a     (operand_a     ),
diff --git a/processor_pipeline_step_1/seq_core_fetch.v b/processor_pipeline_step_1/seq_core_fetch.v
index 9bddc27..b1fad2b 100644
--- a/processor_pipeline_step_1/seq_core_fetch.v
+++ b/processor_pipeline_step_1/seq_core_fetch.v
@@ -15,6 +15,7 @@ module seq_core_fetch
    input                   r2_pc_loadr ,
    input      [A_SIZE-1:0] r2_pc_target,
    input                   r2_pc_flush ,
+   input                   bubble      ,
    output reg       [15:0] ir
 );
 
@@ -27,6 +28,7 @@ always@(posedge clk or negedge rst_n)
    else if(r2_pc_halt ) pc <= pc;
    else if(r2_pc_load ) pc <= r2_pc_target;
    else if(r2_pc_loadr) pc <= $signed(pc) + $signed(r2_pc_target);
+   else if(bubble     ) pc <= pc;
    else                 pc <= pc + 1'b1;
 
 
@@ -37,6 +39,7 @@ always@(posedge clk or negedge rst_n)
    if     (!rst_n     ) ir <= 0;
    else if(r2_pc_halt ) ir <= ir;
    else if(r2_pc_flush) ir <= 0;
+   else if(bubble     ) ir <= ir;
    else                 ir <= instruction;
 
 
diff --git a/processor_pipeline_step_1/tb.v b/processor_pipeline_step_1/tb.v
index 5ffe8db..06c1062 100644
--- a/processor_pipeline_step_1/tb.v
+++ b/processor_pipeline_step_1/tb.v
@@ -1245,6 +1245,188 @@ begin
    
    //==========================================================================================================
    
+   //----------------------------------------------------------------------------------------------------------
+   // LOAD & STORE
+   //----------------------------------------------------------------------------------------------------------
+   
+   // start address =  50 = 0x32 = R0
+   // stop  address = 100 = 0x64 = R1
+   
+   // data = R3
+   
+   // R0 = 0x0000_0032 = start address
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h32           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R1 = 0x0000_0064 = stop address
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h64           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R3 = 0 = data
+   dut.rom.memory[PC] = {   SHIFTL  ,   R3   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // (JMP_STORE_AGAIN):
+   dut.rom.memory[PC] = {   STORE   ,   R0   , 5'b0   ,   R3   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   dut.rom.memory[PC] = {   ADD     ,   R0   ,   R0   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // address++
+   dut.rom.memory[PC] = {   ADD     ,   R3   ,   R3   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // data++
+   
+   dut.rom.memory[PC] = {   SUB     ,   R4   ,   R0   ,   R1   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // check if (actual address == stop address)
+   dut.rom.memory[PC] = {   JMPR_Z  ,   R4   , JMP_LOAD        };   PC = PC + 1'b1;   $display("PC = %0d", PC); //       if TRUE : JMP to LOAD
+   dut.rom.memory[PC] = {   JMPR    ,          JMP_STORE_AGAIN };   PC = PC + 1'b1;   $display("PC = %0d", PC); //       if FALSE: JMP to STORE again
+   
+   // (JMP_LOAD):
+   
+   // start address =  50 = 0x63 = R0
+   // stop  address = 100 = 0x32 = R1
+   
+   // data = R3
+   
+   // R0 = 0x0000_0063 = start address
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h63           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R1 = 0x0000_0032 = stop address
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h00           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h32           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R4 = 49 = expected
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'd49           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // (JMP_LOAD_AGAIN):
+   // R3 = data
+   dut.rom.memory[PC] = {   LOAD    ,   R3   , 5'b0   ,   R0   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // check
+   dut.rom.memory[PC] = {   SUB     ,   R3   ,   R3   ,   R4   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   JMPR_Z  ,   R3   , SUCCESS_COUNT   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R5   ,   R5   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // error_count++
+   dut.rom.memory[PC] = {   JMPR    ,          TEST_COUNT      };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R6   ,   R6   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // success_count++
+   dut.rom.memory[PC] = {   ADD     ,   R7   ,   R7   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // test_count++
+   
+   dut.rom.memory[PC] = {   SUB     ,   R0   ,   R0   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // address--
+   dut.rom.memory[PC] = {   SUB     ,   R4   ,   R4   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // expected--
+   
+   dut.rom.memory[PC] = {   SUB     ,   R3   ,   R0   ,   R1   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // check if (address == stop address)
+   dut.rom.memory[PC] = {   JMPR_Z  ,   R3   , FINISH_LOAD     };   PC = PC + 1'b1;   $display("PC = %0d", PC); //       if TRUE : JMP to FINISH
+   dut.rom.memory[PC] = {   JMPR    ,          JMP_LOAD_AGAIN  };   PC = PC + 1'b1;   $display("PC = %0d", PC); //       if FALSE: JMP to LOAD again
+   
+   // (FINISH_LOAD):
+   
+   //==========================================================================================================
+   
+   // R0 = 0xFF55_55FF = data_out
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R1 = 0x0000_0010 = address
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h0A           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R3 = data
+   dut.rom.memory[PC] = {   SHIFTL  ,   R3   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R4 = 0xFF55_55FF = expected
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // STORE: M[R1] <-- R0
+   dut.rom.memory[PC] = {   STORE   ,   R1   , 5'b0   ,   R0   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // LOAD: R0 <-- M[R1]
+   dut.rom.memory[PC] = {   LOAD    ,   R0   , 5'b0   ,   R1   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R3 = data
+   dut.rom.memory[PC] = {   ADD     ,   R3   ,   R3   ,   R0   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // check
+   dut.rom.memory[PC] = {   SUB     ,   R3   ,   R3   ,   R4   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   JMPR_Z  ,   R3   , SUCCESS_COUNT   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R5   ,   R5   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // error_count++
+   dut.rom.memory[PC] = {   JMPR    ,          TEST_COUNT      };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R6   ,   R6   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // success_count++
+   dut.rom.memory[PC] = {   ADD     ,   R7   ,   R7   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // test_count++
+   
+   //==========================================================================================================
+   
+   // R0 = 0xFF55_55FF = data_out
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R0   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R0   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R1 = 0x0000_0010 = address
+   dut.rom.memory[PC] = {   SHIFTL  ,   R1   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R1   , 8'h0A           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R3 = data
+   dut.rom.memory[PC] = {   SHIFTL  ,   R3   , LEFT_32         };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R4 = 0xFF55_55FF = expected
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'h55           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   SHIFTL  ,   R4   , LEFT_8          };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   LOADC   ,   R4   , 8'hFF           };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // STORE: M[R1] <-- R0
+   dut.rom.memory[PC] = {   STORE   ,   R1   , 5'b0   ,   R0   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // LOAD: R1 <-- M[R1]
+   dut.rom.memory[PC] = {   LOAD    ,   R1   , 5'b0   ,   R1   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // R3 = data
+   dut.rom.memory[PC] = {   ADD     ,   R3   ,   R3   ,   R1   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   
+   // check
+   dut.rom.memory[PC] = {   SUB     ,   R3   ,   R3   ,   R4   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   JMPR_Z  ,   R3   , SUCCESS_COUNT   };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R5   ,   R5   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // error_count++
+   dut.rom.memory[PC] = {   JMPR    ,          TEST_COUNT      };   PC = PC + 1'b1;   $display("PC = %0d", PC);
+   dut.rom.memory[PC] = {   ADD     ,   R6   ,   R6   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // success_count++
+   dut.rom.memory[PC] = {   ADD     ,   R7   ,   R7   ,   R2   };   PC = PC + 1'b1;   $display("PC = %0d", PC); // test_count++
+   
+   //==========================================================================================================
+   
    //----------------------------------------------------------------------------------------------------------
    // HALT
    //----------------------------------------------------------------------------------------------------------
